Chapter 7 
Commands for Programmers
========================
In this chapter, you learn about the following:
	* Syntax coloring
	* Automatic indentation
	* Indentation commands
	* Commands to navigate through the source code  (use `coc` plugin)
	* Getting information through the `man` command (use `coc` plugin)
	* The use of tags to go up and down a call stack (use `coc` plugin)
	* Making programs with the `:make` command (use `coc` plugin)
	* File searching with `:grep` (use `coc` plugin)

Syntax Coloring
---------------
The command `:syntax on` turns on syntax coloring.
That means that thhings such as keywords, strings, comments, and other syntax elements will
have differents colors. (If you have a black-and-white terminal, they will have different 
attributes such as bold, underline, blink, and so on)
  You can customize the colors used for syntax highlighting as well as the highlighting method
itself.

I'm Editing a C File with a Non-Standard Extension. How Do I Tell Vim About It?
-------------------------------------------------------------------------------
The Vim editor uses a file's extension to determine the file type. For example, files that end in
`.c` or `.h` are considered C files. But what if you are editing a C header file named `settings.inc`?
Because this is a non-standard extension, Vim will not know what to do with it. So how do you tell Vim
that this is a C file?
  The answer is to use the option `filetype`. This tells Vim which type of syntax highlighting to use.
With a C file, you use the following command: `:set filetype=c`

Shift Commands
--------------
>> or <<
The left shift command (`<<`) shifs the current line one shift width to the left. 
The right shfit command (`>>`) does the same in the other direction.But what is a shift width? By default
It is 8. However, studies have shown that an indentation of 4 spaces for each level of logic is that most
readable.So shift width of 4 would be much nicer.To change the size of the shift width, use the following
command: `set shiftwidth=4`
  The `<<` command shifts a single line. As usual you can prefix this command with a count; for example, 
`5<<` shifts 5 lines. The command `<motion` shifts each line from the current cursor location to where
motion carries you.

Automatic Indentation
---------------------
The Vim editor has variety of automatic indentation options. The major indentation modes are the following:

cindent:
This works for C-style programs (C, C++, Java, and so on). When this style of indentation is enabled, the Vim
editor automatically indents your program according to a "standard" C style.

smartindent
In this mode, Vim indents each line the same amount as the preceding one, adding an extra level of indentation
if the line contains a left curly brace ({) and removing a indentaion level if the line contains a right curly
brace (}).An extra indent is also added for any of the keywords specified by the `cinwords` option.

autoindent
New lines are indented the same as the previous line.

In insert mode, `CTRL-D` command removes one shift width. `CTRL-T` command adds one shift width

The `=motion` command indents the selected text using Vim's inernal formatting program. If you
want to indent a block of text. 

The `=motion` command the selected text using Vim's internal formatting program. If you want to indent a block
of text, you can use the `=` command to do it. The motion in this case is the `%`(go to matching{}) command.
how to do formatting selected text using Vim'internal identation? In C-style language.
Step 1, Position cursor on the first "{"
Step 2, Execute the command "=%"

Matching Paris
--------------
The `%` command is designed to match pairs of (), {}, or [].Place the curosr on one, type `%` and you will
jump to the other.
The `%` command will also match the ends of C comments.
Also the `%` command will match "#ifdef" with the corresponding "#endif"
For "#if", "#else", and "#endif" sets, the "%" command will jump from the "#if" to the "#else", and then to 
the "#endif" and back to the "#if"

Shifting a Block of Text Enclosed in {}
---------------------------------------
Suppose that you want to indent the text encoded in {} one level. Postion the curosr on the first(orlast) {.
Execute the command `>%`.This shift the text right to where the motion takes you. In the case, `%` takes you 
to the matching {}.
Unfortunately this shifts the {} in addition to the text.Suppose you just want to shift what is in the {}.
Then you need to do the following:
1, Position the cursor on the first {.
2, Exectue the command `>i{`.

This shift right command (`>`) shifts the selected text to the right one shift width. In this case, the selection
command that follows is `i{`, which is the "inner {} block" command.

Indenting a Block Using Visual Mode
To indent a block using Visual Mode, follow these steps:
1, Position the cursor on the left or right curly brace.
2, Start Visual mode with the `v` command.
3, Select the inner {} block with the command `i}`.
4, Indent the text with `>`.

Finding the man Pages
---------------------
The `K` command runs a UNIX man command using the word under the cursor as a subject. If you position the cursor
on the word open and press K, the man page for open will display.


Tags
----
The Vim editor can locate function definitions in C and C++ programs. This provess extremely useful when you are
trying to understand a program.
 The location of function definitions (called tags in vim terminology) is stored in a table of contents file 
generated by the program `ctags`.(This program comes with Vim)
 To generate the table of contents file, which is named tags, use the following command: `ctags *.c`
Now when you are in Vim and you want to go to a function definition, you can jump to it by using the following
command `:tag function` This command will find the function even if it is another file.

The `CTRL-]` command jumps to the tag of the word that is under the cursor. This makes it easy to explore a tangle
of C code.

The `:tags` command shows the list of the tags that you have traversed through.
Now to go back. The `CTRL-T` command goes the preceding tag.This command takes a count argument that indicates how 
many tags to jump back.

Help and Tags
------------
The help system makes extensive use of tags. To execute a "hyperlink jump", you press `CTRL-]`(jump a tag).You can 
return to a preceding subject with `CTRL-T`(jump to preceding tag) and so on.

Windows and Tags
----------------
The `:tag` command replaces the current window with the one containing the new function. But suppose you want to see
only the old function but also the new one? You can split the window using the `:split` command followed by the `:tag`
command. But Vim has a shorthand command that is shorthand for both commands: `:stag tag`
The `CTRL-W ]` command splits the current window and jumps to the tag under the curror in the unpp window. If a count
is specified, the new window will be count lines high.

Finding a Procedure When You Only Know Part of the Name
-------------------------------------------------------
If you want to find a procedure named "something write something" for example, you can use the following command:
`:tag/write`
This finds all the procedures with the word write in their names and positions the cursor on the first one.
  If you want to find all procedure that begin with read, you need to use the following command:
`:tag/^read
  If you are not sure whether the procedure is DoFile, do_file, or Do_File, you can usee this command:
`:tag/[Dd]o_\=[Ff]ile`
  These command can return multiple matches. You can get a list of the tags with the following command:
`:tselect {name}`
F   Fullmatch (if missing, a case-ignored match)
S   Static tag (if missing, a global tag)
C   Tag in the current file.

The `g]` command does a `:tselect` on the indentifier under the cursor.
The `tjump` command works just like the `:tselect` command, except if the selection results in only one item, it
is automatically selected. The `g CTRL-]` command does a `:tjump` on the word under the cursor.

A number of other related commands relate to this tag selection set, including the following:
    :count tnext            Go to the next tag
    :count tprevious        Go to the previous tag
    :count tNext            Go to the  next tag
    :count trewind          Go to the first tag
    :count tlast            Go the the last tag

*Bookmark Page 84 of 572 Chapter 7 Commands for Programmers.*
