Chapter 4
Text Blocks and Multiples Files
===============================
This chapter discusses the following topics:
	*Simple cut-and-paste operations (in Vim terms,delete and put)
	*Marking locations within the text
	*Copying text into a register using the yank commands
	*Filtering text
	*Editing multiple files

Cut, Paste, and Copy
--------------------
p	When you delete something with d, x, or another command,
	the text is saved. You can paste it back using the p
	command.

Character Twiddling
-------------------
Frequently when you are typing, your fingers get ahead of your
brain. The result a typo such as teh for the. The Vim editor
makes it easy to correct such problems.Just put the curosr on
the e of teh and execute the command xp.
	x  Delete the character 'e' and places it in a register
	p  Puts the text after the cursor, which is on the 'h'

More on "Putting"
----------------
You can execute the p command multiple times. Each time, it inserts
another copy of the text into the file.
The p command places the text after cursor. The P command places the 
text before the cursor. A count can be used with both commands and,
if specified, the text will be inserted count times.


Marks
-----
The Vim editor enables you to place marks in your text. The command ma
marks the place under the cursor as mark a. You can place 26 marks (a
through z) in your text.
  To go to a mark, use the command `mark, where mark is the mark letter
(and ` is the backtick or open single-quote character).
  The command'mark (single quotation mark, or apostrophe) moves you to the
beginning of the line containing the mark. This differs from the `mark commnd,
which moves you to the marked line and column.
  The 'mark command can be very useful when deleting a long series of lines.
To delete a long series of lines, follow these steps:
  1, Move the cursor to the beginning of the text you want to delete.
  2, Mark it using the command ma. (This marks it with mark a)
  3, Go to the end of the text to be removed, Delele to mark a using the 
     command d'a

Where Are the Marks?
-------------------
To list all the marks, use the following command:
:marks
Clean the mark, use the following command:
:delm (a~zA~Z0~9) 
:delm! This is deletes all lowercase marks (a~z) for current buffer.

Yanking
------
y: The y command "yank" text into a register (without removing it from 
   the file). 

yy: yy yanks the current line into the buffer.

Y: the Y command yanks a single line. If preceded by a count, if yanks 
   that number of lines into the register. You might have expected Y to 
   yank until the end of the line, like D and C, but it really yanks the 
   whole line.


Filtering
---------
The !motion command takes a block of text and filters it through another
program. In other words, it runs the system command represented by 
command, giving it the block of text represented by motion as input. 
The output of this command then replaces the seleted block.

The !! command runs the current line through a filter.

For example:
I'm editing a `readme.txt` file,  and want to include in it a list of
the files in the current directory. I position the curor on a blank line
type the `!!ls`. This puts output of the `ls` command into my file.

I want to input the current time stamp. use this command `!!date`

Editing Another File
--------------------
Suppose that you have finished editing one file and want to edit
another file. You can execute the following command:
:vi file

This command  automatically closes the current file and opens
the new one. If the current file has unsaved chagnes, however, 
Vim displays a warning message and aborts the command:
  No write since last change (use ! to override)

:write   	write last change to file.
:vi! file.txt   force Vim discard your changes and edit the new
		file.

:e file.txt     edit current file to anothe file. 
:e! file.txt    samiler than `:vi! file.txt`


The :vim command
----------------
The following command works just like the `:vi` command, except
the new file is opened in read-only mode:
	:vim file
If you attempt to change a read-only file, you receive a warning.
You can still make the changes; you just can't save them. When you
attempt to save a changed read-only file, Vim issuses an error message
and refuses to save the file. (You can force the write with the `:write!`
command)

*Bookmark vimbook-opl.pdf Page 41 of 572*

Dealing with Multiple Files
---------------------------
vim arguments :
This command starts Vim and tells it that you will be
editing three files. By Vim displays just the first file.
`arguments` like `one.c two.c three.c`

:next or :n
 To edit the next file. Note that if you have unsaved changes in
 the current file and you try to do a `:next`, you will get a 
 warning message and the `:next` will not work.

:wnext or :wn
Write your unsaved changes in the current file and change next
edit file. (arguments)

:next! or :n!
You can force Vim to go the next file using the force (!) option.
If you use `:next!` command and your current file has changes, you
will lose those changes.

autowrite
This is the `autowrite` option. If this option is set, Vim will
not issue any `No write...` messages. To turn this option on,use
the command `:set autowrite`, To turn it off, use the command
`:set noautowrite`

Which File Am I On?
-------------------
:args
Suppose you are editing a number of files an want to see which one you are on.
The `:args` command displays the list of the files currently being edited. The
one that you are working on now is enclosed in square brackets


Going Back a File
-----------------
:previous or :Next or :N
To go back file, If you have unsaved changes in current file and do this command
you will get a warning message and abort. you can use force (!) option, you do this,
you will lose changes.
:wp or :wN
write current file and to go back file.

Editing the First or Last File
------------------------------
:rewind or :first 
To go the first file in a number of files. 

:last
To go the last file in a number of files. 


Editing Two Files
-----------------
Suppose that you edit two files by starting Vim with following:
	$ vim one.c two.c
You edit a a little on th first file, and then go to the next
file with the following:
	:wnext
At this point, the previous file, `one.c` is considered the 
`alternate file`. This has special significance in Vim.
For example, a special text register (#) contains the name of
this file.
  By pressing `CTRL-^`, you can switch editing from the current
file to the alternate file. Therefore, if you are editing `two.c`
and press `CTRL-^`, you will switch to `one.c` (`two.c` becoming
the alternate file). Pressing `CTRL-^` one more time switches you
back.

	$vim one.c two.c three.c
Note:
When you first start editing (file `one.c`) and press `CTRL-^`, you
will get an error message: `No alternate file`. Remember the `alternate
file` is the last file you just edited before this one (in this editing 
session). The alternate file name save in register named in `#`.
